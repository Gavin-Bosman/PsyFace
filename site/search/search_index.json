{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"PsyFace","text":"<ul> <li> <p>Overview </p> <p>PsyFace is a python package for dynamic facial occlusion and facial color manipulation in both still images and videos. PsyFace provides a range of tools for manipulating color in user-specified facial regions using industry-standard color spaces (1) (RGB, BGR, HSV, CIELAB), as well as dynamic facial occlusion of user-specified facial regions, and facial (as well as individual facial regions) isolation from the background using video matting.</p> <p>PsyFace was designed with ease of processing in mind. Each of the core package functions can process entire directories of mixed image and video files, with or without nested directories, from a single function call. Uniquely, PsyFace provides access to temporal color manipulation over videos. Users can chooses from a variety of predefined timing functions (2) or choose to define their own. </p> <ol> <li> For more information on color spaces check out Cambridge in Color. </li> <li> PsyFace provides predefined function definitions for linear, sigmoid, gaussian and sinusoidal functions.</li> </ol> </li> <li> <p>Function Outputs</p> <p></p> </li> </ul> <p>View On Github  Open Documentation </p>"},{"location":"changelog/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p>"},{"location":"changelog/#unreleased","title":"[Unreleased]","text":"<ul> <li>v0.5 unit testing</li> <li>v1.0 gui preview prior to file processing</li> </ul>"},{"location":"changelog/#042-2024-08-24","title":"[0.4.2] - 2024-08-24","text":""},{"location":"changelog/#added","title":"Added","text":"<ul> <li>Sphinx dependency for autodocumentation.</li> <li>Rst files defining the documentation build. </li> </ul>"},{"location":"changelog/#changed","title":"Changed","text":"<ul> <li>Updated readme.md with examples, licenses and link to documentation page</li> </ul>"},{"location":"changelog/#removed","title":"Removed","text":""},{"location":"changelog/#041-2024-08-18","title":"[0.4.1] - 2024-08-18","text":""},{"location":"changelog/#added_1","title":"Added","text":""},{"location":"changelog/#changed_1","title":"Changed","text":"<ul> <li>v0.4.1 bug fixes for processing directories of mixed file types (images and videos). </li> </ul>"},{"location":"changelog/#removed_1","title":"Removed","text":""},{"location":"changelog/#040-2024-08-17","title":"[0.4.0] - 2024-08-17","text":""},{"location":"changelog/#added_2","title":"Added","text":""},{"location":"changelog/#changed_2","title":"Changed","text":"<ul> <li>v0.4 Refactored all methods; moved repetative frame operations to nested functions for increased readability.</li> <li>Fixed buggy behaviour when working with still images over all methods. On top of video formats .MP4 and .MOV, you can now perform facial masking, occlusion and colour shifting over image formats .jpg, .jpeg, .png, and .bmp.</li> <li>Increased error handling; methods should now be able to process large directories of mixed file formats efficiently in a single call. </li> </ul>"},{"location":"changelog/#removed_2","title":"Removed","text":""},{"location":"changelog/#031-2024-08-11","title":"[0.3.1] - 2024-08-11","text":""},{"location":"changelog/#added_3","title":"Added","text":"<ul> <li>v0.3.1 Support for nose masking and occluding</li> </ul>"},{"location":"changelog/#changed_3","title":"Changed","text":"<ul> <li>Added bar-style occlusion options to occlude_face_region(). You can now perform bar-style occlusion on the eyes, nose  and mouth regions. </li> </ul>"},{"location":"changelog/#removed_3","title":"Removed","text":""},{"location":"changelog/#030-2024-08-02","title":"[0.3.0] - 2024-08-02","text":""},{"location":"changelog/#added_4","title":"Added","text":"<ul> <li>v0.3 occlude_face_region()</li> </ul>"},{"location":"changelog/#changed_4","title":"Changed","text":"<ul> <li>Redefined the naming convention used for constants in utils.py</li> </ul>"},{"location":"changelog/#removed_4","title":"Removed","text":""},{"location":"changelog/#022-2024-07-31","title":"[0.2.2] - 2024-07-31","text":""},{"location":"changelog/#added_5","title":"Added","text":""},{"location":"changelog/#changed_5","title":"Changed","text":"<ul> <li>Changed mp4 video codec from h264 to cv2 supported mp4v.</li> <li>Mask_face_region and face_color_shift now take confidence parameters for the underlying mediapipe face landmarker model.</li> <li>Implemented otsu thresholding to isolate foreground to use as a mask. This foreground mask ensures that no background  artifacts are present in the facial color shifting, or facial masking. </li> <li>Added documentation for new function parameters.</li> </ul>"},{"location":"changelog/#removed_5","title":"Removed","text":""},{"location":"changelog/#021-2024-07-24","title":"[0.2.1] - 2024-07-24","text":""},{"location":"changelog/#added_6","title":"Added","text":"<ul> <li>v0.2.1 transcode_video_to_mp4()</li> </ul>"},{"location":"changelog/#changed_6","title":"Changed","text":"<ul> <li>All functions will work by default with .mp4 and .mov video files. If an older container is being used,  see transcode_video_to_mp4 to convert video codecs.</li> <li>Bug fixes with facial mask in face_color_shift; removed background artifacts present in the masked facial region.</li> </ul>"},{"location":"changelog/#removed_6","title":"Removed","text":"<ul> <li>Removed dependancy ffprobe-python.</li> </ul>"},{"location":"changelog/#020-2024-07-21","title":"[0.2.0] - 2024-07-21","text":""},{"location":"changelog/#added_7","title":"Added","text":"<ul> <li>v0.2 added dependancy ffprobe-python.</li> </ul>"},{"location":"changelog/#changed_7","title":"Changed","text":"<ul> <li>Added input file codec sniffing, output video files will now match input type for mask_face_region and face_color_shift.</li> </ul>"},{"location":"changelog/#removed_7","title":"Removed","text":""},{"location":"changelog/#011-2024-07-20","title":"[0.1.1] - 2024-07-20","text":""},{"location":"changelog/#added_8","title":"Added","text":""},{"location":"changelog/#changed_8","title":"Changed","text":"<ul> <li>Minor bug fix for negative saturation shift.</li> </ul>"},{"location":"changelog/#removed_8","title":"Removed","text":""},{"location":"changelog/#010-2024-07-17","title":"[0.1.0] - 2024-07-17","text":""},{"location":"changelog/#added_9","title":"Added","text":"<ul> <li>v0.1 mask_face_region()</li> <li>v0.1 extract_color_channel_means()</li> <li>v0.1 face_color_shift()</li> <li>v0.1 shift_color_temp()</li> </ul>"},{"location":"changelog/#changed_9","title":"Changed","text":"<ul> <li>Updated documentation and type hints for all package functions.</li> <li>Vectorized color shifting operations in shift_color_temp, massively reducing time costs.</li> <li>Restructured package into src, data and testing folders.</li> <li>Moved constants and helper functions into utils.py.</li> </ul>"},{"location":"changelog/#removed_9","title":"Removed","text":""},{"location":"license/","title":"License","text":"<p>MIT License</p> <p>Copyright (c) [2024] [Gavin Bosman]</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"reference/","title":"Code Reference","text":""},{"location":"reference/#dynamic-facial-masking","title":"Dynamic Facial Masking","text":"<pre><code>def mask_face_region(input_dir:str, output_dir:str, mask_type:int = FACE_SKIN_ISOLATION, with_sub_dirs:bool = False,\n                     min_detection_confidence:float = 0.5, min_tracking_confidence:float = 0.5, static_image_mode:bool = False) -&gt; None:\n    \"\"\"Applies specified mask type to video or image files located in input_dir, then outputs masked files to output_dir.\n\n    Parameters\n    ----------\n\n    input_dir: str\n        A path string of the directory containing files to process.\n\n    output_dir: str\n        A path string of the directory where processed videos and images will be written to.\n\n    mask_type: int\n        An integer indicating the type of mask to apply to the input videos. This can be one of three mask configuration options: FACE_OVAL, FACE_OVAL_TIGHT, FACE_SKIN_ISOLATION\n\n    with_sub_dirs: bool\n        Indicates if the input directory contains nested subdirectories.\n\n    min_detection_confidence: float\n        A normalised float value in the range [0,1], this parameter is passed as a specifier to the mediapipe \n        FaceMesh constructor.\n\n    min_tracking_confidence: float\n        A normalised float value in the range [0,1], this parameter is passed as a specifier to the mediapipe \n        FaceMesh constructor.\n\n    static_image_mode: bool\n        A boolean flag indicating to the mediapipe FaceMesh that it is working with static images rather than\n        video frames.\n\n    Raises\n    ------\n\n    ValueError \n        Given an unknown mask type.\n    TypeError \n        Given invalid parameter types.\n    OSError: \n        Given invalid path strings for in/output directories\n    \"\"\"\n</code></pre>"}]}